#include <iostream>
#include <queue>
using namespace std;

struct Node {
    int data;
    Node *left, *right;
};

// Create new node
Node* newNode(int val) {
    Node* node = new Node;
    node->data = val;
    node->left = node->right = nullptr;
    return node;
}

// a) Insert node (no duplicates)
Node* insert(Node* root, int val) {
    if (!root) return newNode(val);
    if (val < root->data) root->left = insert(root->left, val);
    else if (val > root->data) root->right = insert(root->right, val);
    else cout << "Duplicate value not inserted: " << val << endl;
    return root;
}

// b) Delete node
Node* findMin(Node* root) {
    while (root && root->left) root = root->left;
    return root;
}

Node* deleteNode(Node* root, int key) {
    if (!root) return nullptr;
    if (key < root->data) root->left = deleteNode(root->left, key);
    else if (key > root->data) root->right = deleteNode(root->right, key);
    else {
        if (!root->left) {
            Node* temp = root->right;
            delete root;
            return temp;
        }
        else if (!root->right) {
            Node* temp = root->left;
            delete root;
            return temp;
        }
        Node* temp = findMin(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// c) Search node
bool search(Node* root, int key) {
    if (!root) return false;
    if (root->data == key) return true;
    return (key < root->data) ? search(root->left, key) : search(root->right, key);
}

// d) Traversals
void inorder(Node* root) {
    if (root) {
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}

// e) Depth of tree
int depth(Node* root) {
    if (!root) return 0;
    return 1 + max(depth(root->left), depth(root->right));
}

// f) Mirror image
void mirror(Node* root) {
    if (root) {
        swap(root->left, root->right);
        mirror(root->left);
        mirror(root->right);
    }
}

// g) Copy tree
Node* copyTree(Node* root) {
    if (!root) return nullptr;
    Node* newNodeCopy = newNode(root->data);
    newNodeCopy->left = copyTree(root->left);
    newNodeCopy->right = copyTree(root->right);
    return newNodeCopy;
}

// h) Display parents and children
void showParents(Node* root) {
    if (!root) return;
    if (root->left)
        cout << "Parent: " << root->data << " -> Left Child: " << root->left->data << endl;
    if (root->right)
        cout << "Parent: " << root->data << " -> Right Child: " << root->right->data << endl;
    showParents(root->left);
    showParents(root->right);
}

// i) Display leaf nodes
void printLeaves(Node* root) {
    if (root) {
        if (!root->left && !root->right)
            cout << root->data << " ";
        printLeaves(root->left);
        printLeaves(root->right);
    }
}

// j) Level-wise display
void bfs(Node* root) {
    if (!root) return;
    queue<Node*> q;
    q.push(root);
    while (!q.empty()) {
        Node* temp = q.front(); q.pop();
        cout << temp->data << " ";
        if (temp->left) q.push(temp->left);
        if (temp->right) q.push(temp->right);
    }
}

int main() {
    Node* root = nullptr;
    int choice, val;

    do {
        cout << "\n--- BST MENU ---\n";
        cout << "1.Insert\n2.Delete\n3.Search\n4.Inorder\n5.Depth\n6.Mirror\n7.Copy Tree\n8.Show Parent-Child\n9.Show Leaves\n10.BFS\n11.Exit\nChoice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: "; cin >> val;
                root = insert(root, val); break;
            case 2:
                cout << "Enter value to delete: "; cin >> val;
                root = deleteNode(root, val); break;
            case 3:
                cout << "Enter value to search: "; cin >> val;
                cout << (search(root, val) ? "Found" : "Not Found") << endl;
                break;
            case 4:
                cout << "Inorder Traversal: "; inorder(root); cout << endl;
                break;
            case 5:
                cout << "Depth: " << depth(root) << endl; break;
            case 6:
                mirror(root);
                cout << "Mirror formed.\n"; break;
            case 7: {
                Node* copied = copyTree(root);
                cout << "Inorder of copied tree: "; inorder(copied); cout << endl;
                break;
            }
            case 8:
                showParents(root); break;
            case 9:
                cout << "Leaf Nodes: "; printLeaves(root); cout << endl; break;
            case 10:
                cout << "Level Order (BFS): "; bfs(root); cout << endl; break;
            case 11:
                cout << "Exiting.\n"; break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 11);

    return 0;
}
